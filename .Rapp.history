sps
sps='Acinetobacter_baylyi_46310'
i=1
GENOME='1221291.3'
system(command=paste0('wget -N "ftp://ftp.patricbrc.org/genomes/', GENOME, '/', GENOME, '.PATRIC.spgene.tab"'))#
system(command=paste0("grep 'Virulence Factor' ", GENOME, ".PATRIC.spgene.tab > tmp.2")) #
system(command=paste0("head -n 1 ", GENOME, ".PATRIC.spgene.tab > tmp.1"))#
system(command=paste0("cat tmp.* > ", GENOME, ".PATRIC.spgene.tab"))#
system(command=paste0("mv ", GENOME, ".PATRIC.spgene.tab ", sps[i],".vf") )
dvf<- read.csv(paste0(sps[i],'.vf'), header=TRUE, sep = '\t', colClasses = 'character') %>%#
  select(genome_id, patric_id, gene, product, source) %>%#
  rename(qpid = patric_id) %>%#
  filter(source == 'Victors')
library(dplyr)
dvf<- read.csv(paste0(sps[i],'.vf'), header=TRUE, sep = '\t', colClasses = 'character') %>%#
  select(genome_id, patric_id, gene, product, source) %>%#
  rename(qpid = patric_id) %>%#
  filter(source == 'Victors')
head(dvf)
dvf %>%#
  mutate(species = sps[i]) %>%#
  rename(peg = qpid) %>%#
  select(species, peg, gene, product, source)
source("~/Documents/PhD/Research/background_scripts/basic_packages.R")#
library(ape)#
library(MCMCglmm)#
midas.info<- read.table('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/species_info_files/species_info.txt', header=TRUE)#
head(midas.info)#
midas.info[grep('55206',midas.info$species_id), ]#
spos<- read.table('~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/SPORULATION_SCORES_all_midas_species.txt', header=TRUE, sep = '\t') %>%#
  rename(species_id = species)#
vt<- read_excel('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/Midas_transmission_data.xls') %>%#
  filter(tax_level == 'species',#
         time_point == '12M') %>%#
  mutate(species_id = gsub(')', '', fixed = TRUE, gsub('._', '_', fixed = TRUE, gsub('(id:', '', gsub(' ', '_', tax_group), fixed = TRUE)))) %>%#
  select(species_id, prop1) %>%#
  rename(vt = prop1)#
#
vt$species_id[grep('55206', vt$species_id)]<- midas.info[grep('55206',midas.info$species_id), 1]#
vt<- left_join(vt, spos, by ='species_id')#
vt$spcol<-ifelse(vt$species_id =='Escherichia_coli_58110', 'Ecoli', 'other')#
ggplot(vt, aes(x = sporulation_score, y =  vt,  col = spcol))+#
  geom_point()#
#
lm1<- lm(vt~sporulation_score, data = vt)#
summary(lm1)#
tree<- read.tree('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/species_info_files/midas_tree_renamed.newick')#
tree<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% vt$species_id])#
phylogeny<- chronopl(tree, lambda = 0)#
phylogeny<- makeNodeLabel(phylogeny)#
Ainv<-inverseA(phylogeny, scale=FALSE)$Ainv
prior.1<- list(R=list(R1 = list(V=diag(1), nu = 0.002)),  # a single residual variance#
               G=list(G1 = list(V=diag(1), nu = 0.002)))  # a single random effect#
div = 1#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
#
vt<- as.data.frame(vt)
m.vt<- MCMCglmm(vt  ~ 1 + sporulation_score,#
                random = ~species_id,#
                ginverse = list(species_id=Ainv),#
                 data = vt,#
                 prior = prior.1,#
                 family=c("gaussian"),#
                 start=list(QUASI=FALSE),#
                 #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                 DIC = TRUE,#
                 nitt=nitt, thin=thin, burnin=burnin)
summary(m.vt)
plot(m.vt)
vt<- read_excel('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/Midas_transmission_data.xls') %>%#
  filter(tax_level == 'species',#
         time_point == '12M') %>%#
  mutate(species_id = gsub(')', '', fixed = TRUE, gsub('._', '_', fixed = TRUE, gsub('(id:', '', gsub(' ', '_', tax_group), fixed = TRUE)))) %>%#
  filter(n1 > 3) %>%#
  select(species_id, prop1) %>%#
  rename(vt = prop1)#
#
vt$species_id[grep('55206', vt$species_id)]<- midas.info[grep('55206',midas.info$species_id), 1]#
vt<- left_join(vt, spos, by ='species_id')
vt$genus<- do.call('rbind', strsplit(vt$species_id, '_'))[,1]#
ggplot(vt, aes(x = sporulation_score, y =  vt, col = genus))+#
  ylim(0,1)+#
  geom_point(size = 2)+#
  scale_color_brewer(palette = 'Set1')
tree<- read.tree('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/species_info_files/midas_tree_renamed.newick')#
tree<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% vt$species_id])#
phylogeny<- chronopl(tree, lambda = 0)#
phylogeny<- makeNodeLabel(phylogeny)#
Ainv<-inverseA(phylogeny, scale=FALSE)$Ainv#
prior.1<- list(R=list(R1 = list(V=diag(1), nu = 0.002)),  # a single residual variance#
               G=list(G1 = list(V=diag(1), nu = 0.002)))  # a single random effect
phylogeny
div = 1#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
#
vt<- as.data.frame(vt)
m.vt.n3<- MCMCglmm(vt  ~ 1 + sporulation_score,#
                random = ~species_id,#
                ginverse = list(species_id=Ainv),#
                data = vt,#
                prior = prior.1,#
                family=c("gaussian"),#
                start=list(QUASI=FALSE),#
                #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                DIC = TRUE,#
                nitt=nitt, thin=thin, burnin=burnin)
summary(m.vt.n3)
summary(m.vt)
summary(m.vt.n3)
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/verticalTransmission_SporulationScores.RData')
midas.info<- read.table('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/species_info_files/species_info.txt', header=TRUE)#
head(midas.info)#
midas.info[grep('55206',midas.info$species_id), ]#
spos<- read.table('~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/SPORULATION_SCORES_all_midas_species.txt', header=TRUE, sep = '\t') %>%#
  rename(species_id = species)#
vt<- read_excel('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/Midas_transmission_data.xls') %>%#
  filter(tax_level == 'species',#
         time_point == '12M') %>%#
  mutate(species_id = gsub(')', '', fixed = TRUE, gsub('._', '_', fixed = TRUE, gsub('(id:', '', gsub(' ', '_', tax_group), fixed = TRUE)))) %>%#
  select(species_id, prop1) %>%#
  rename(vt = prop1)#
#
vt$species_id[grep('55206', vt$species_id)]<- midas.info[grep('55206',midas.info$species_id), 1]#
vt<- left_join(vt, spos, by ='species_id')#
lm1<- lm(vt~sporulation_score, data = vt)#
summary(lm1)#
tree<- read.tree('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/species_info_files/midas_tree_renamed.newick')#
tree<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% vt$species_id])#
phylogeny<- chronopl(tree, lambda = 0)#
phylogeny<- makeNodeLabel(phylogeny)#
Ainv<-inverseA(phylogeny, scale=FALSE)$Ainv#
prior.1<- list(R=list(R1 = list(V=diag(1), nu = 0.002)),  # a single residual variance#
               G=list(G1 = list(V=diag(1), nu = 0.002)))  # a single random effect#
div = 1#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
#
vt<- as.data.frame(vt)
vt$logvtp1<- log(vt$vt+1)
m.logvtp1<- MCMCglmm(logvtp1  ~ 1 + sporulation_score,#
                random = ~species_id,#
                ginverse = list(species_id=Ainv),#
                data = vt,#
                prior = prior.1,#
                family=c("gaussian"),#
                start=list(QUASI=FALSE),#
                #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                DIC = TRUE,#
                nitt=nitt, thin=thin, burnin=burnin)
summary(m.logvtp1)
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/verticalTransmission_SporulationScores.RData')
summary(m.vt)
ggplot(vt, aes(x = sporulation_score, y =  vt,  col = genus))+#
  geom_point()
vt$genus<- do.call('rbind', strsplit(vt$species_id, '_'))[,1]#
ggplot(vt, aes(x = sporulation_score, y =  vt,  col = genus))+#
  geom_point()
x1<- c(1.4.2.7.8.3.9.10.11.14)
x1<- c(1,3,2,8,4,10,45,2,4,28,22)
length(x1+1)
0.25*11
0.5*11
0.75*11
x1.sort<- sort(x1)
0.75*(x1.sort[2])
(0.75*(x1.sort[2]))+(0.25*x1.sort[3])
mean(x1.sort[2:3])
median(x1)
summary(median)
summary(x1)
x1.sort[2:3]
x1.sort
length(x1)
0.25*11
summary(x1, split=)
quantiles(x1)
quantile(x1)
quantile(x1, type = 3)
x2 = randn(10)
sample(1:100, 1)
sample(1:100, 16)
x1<- sample(1:100, 16)
length(x1)
0.25*17
0.5*17
0.75*17
x1[4]
x1[13]
mean(x1[8:9])
quantiles(x1, type = 3)
quantile(x1, type = 3)
x1.sort<- sort(x1)
x1.sort[c(4,8,9,13)]
mean(c(46,47))
length(x1)
0.75*17
x1.sort[13]
x1.sort[12]
0.3*4
x1<- c(3,5,7,8,9,23)
summary(x1)
quantiles(x1)
quantile(x1)
quantile(x1, type = 3)
0.25*(7)
0.5*(7)
0.75*(7)
0.5/6
1.5/6
(3*0.5)/0.25
(3*0.75)/0.25
x1<- c(1,3,6,7,9,12)
summary(x1)
1/6
2/6
0.333 - 0.1666
library(dplyr)#
library(ggplot2)#
library(lme4)#
library(nlme)#
#
# data from Glynn et al, with age classes combined. And cooperation data for those species#
glynn.combinedAge<- read_excel('~/Desktop/my_cfr/cfr_data_cases.xlsx', sheet = 'glynn_cfr_CombinedAge')#
glynn.coop<- read_excel('~/Desktop/my_cfr/cfr_data_cases.xlsx', sheet = 'coop_data_for_retained_species', na = 'NA')#
d<- left_join(glynn.coop, glynn.combinedAge)#
d<- d[!is.na(d$nb_extracellular),]#
d$total_alive<- d$total_cases - d$total_deaths#
ggplot(d, aes(x = quorum_sensing, y = total_deaths/total_cases, col = as.factor(numbers_estimated_and_population_data)))+#
  geom_point()+#
  geom_text(aes(label=glynn_species),hjust=0, vjust=0)
glynn.combinedAge<- read_excel('~/Desktop/my_cfr/cfr_data_cases.xlsx', sheet = 'glynn_cfr_CombinedAge')
library(dplyr)#
library(ggplot2)#
library(lme4)#
library(nlme)#
library(readxl)#
library(ape)#
library(MCMCglmm)
glynn.combinedAge<- read_excel('~/Desktop/my_cfr/cfr_data_cases.xlsx', sheet = 'glynn_cfr_CombinedAge')#
glynn.coop<- read_excel('~/Desktop/my_cfr/cfr_data_cases.xlsx', sheet = 'coop_data_for_retained_species', na = 'NA')#
d<- left_join(glynn.coop, glynn.combinedAge)#
d<- d[!is.na(d$nb_extracellular),]#
d$total_alive<- d$total_cases - d$total_deaths
ggplot(d, aes(x = quorum_sensing, y = total_deaths/total_cases, col = as.factor(numbers_estimated_and_population_data)))+#
  geom_point()+#
  geom_text(aes(label=glynn_species),hjust=0, vjust=0)
m<- glm(cbind(total_deaths, total_alive) ~ nb_cds + nb_extracellular , family = 'binomial', data = d) # ***#
m<- glmer(cbind(total_deaths, total_alive) ~ nb_cds + nb_extracellular + (1|cohort), family = 'binomial', data = d) # ***#
m<- glmer(cbind(total_deaths, total_alive) ~ nb_cds + nb_extracellular + (1|species), family = 'binomial', data = d) # ns#
summary(m)
d.trim<- d[d$numbers_estimated_and_population_data == 0,]#
m<- glmer(cbind(total_deaths, total_alive) ~ nb_cds + nb_extracellular + (1|species), family = 'binomial', data = d.trim) # *#
summary(m)
tree<- read.tree('./data/species_info_files/glynn.newick')#
tree$tip.label#
unique(d$supfam_id) %in% tree$tip.label#
# tree for full dataset#
tree<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% d$supfam_id])#
phylogeny<- chronopl(tree, lambda = 1)#
plot(phylogeny) # ultrametricised tree#
phylogeny<-makeNodeLabel(phylogeny)#
Ainv<-inverseA(phylogeny, scale=FALSE)$Ainv#
#
# tree for trimmed dataset#
tree.trim<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% d.trim$supfam_id])#
phylogeny.trim<- chronopl(tree.trim, lambda = 1)#
plot(phylogeny.trim) # ultrametricised tree#
phylogeny.trim<-makeNodeLabel(phylogeny.trim)#
Ainv.trim<-inverseA(phylogeny.trim, scale=FALSE)$Ainv
tree<- read.tree('/Users/s1687811/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/species_info_files/glynn.newick')#
tree$tip.label#
unique(d$supfam_id) %in% tree$tip.label#
# tree for full dataset#
tree<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% d$supfam_id])#
phylogeny<- chronopl(tree, lambda = 1)#
plot(phylogeny) # ultrametricised tree#
phylogeny<-makeNodeLabel(phylogeny)#
Ainv<-inverseA(phylogeny, scale=FALSE)$Ainv#
#
# tree for trimmed dataset#
tree.trim<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% d.trim$supfam_id])#
phylogeny.trim<- chronopl(tree.trim, lambda = 1)#
plot(phylogeny.trim) # ultrametricised tree#
phylogeny.trim<-makeNodeLabel(phylogeny.trim)#
Ainv.trim<-inverseA(phylogeny.trim, scale=FALSE)$Ainv
prior.2 <- list(R = list(R1 = list(V = diag(1), nu = 0.002)), # residual, for binomial (not binary!) data, it can be estimated, I think#
                G = list(G1 = list(V = diag(1), nu = 1000, alpha.mu = rep(0,1), alpha.V = diag(1)),  # phylo#
                         G2 = list(V = diag(1), nu = 1000, alpha.mu = rep(0,1), alpha.V = diag(1)))) # non-phylo#
                        #G3 = list(V = diag(1), nu = 1000, alpha.mu = rep(0,1), alpha.V = diag(1)))) # cohort#
#
div = 10#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
#
d<- as.data.frame(d)#
d.trim<- as.data.frame(d.trim)
m3.binomial.coop_only <-function(df, focal_trait, prior){#
  d.tmp<- df#
  colnames(d.tmp)[which(colnames(d.tmp) == focal_trait)]<- 'focal_trait'#
#
  m<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + nb_cds + focal_trait ,#
                          random = ~supfam_id+species,#+cohort, supfam used for the Ainv matrix, #
                          ginverse = list(supfam_id=Ainv),#
                          data = d.tmp,#
                          prior = prior,#
                          family=c("multinomial2"), trunc=T,#
                          start=list(QUASI=FALSE),#
                          #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                          DIC = TRUE,#
                          nitt=nitt, thin=thin, burnin=burnin)#
#
  return(m)#
}
# UNIVARIATE, FUL DATA#
m3.binomial.coop_only.fulldata.bio<- m3.binomial.coop_only(df = d, focal_trait = 'biofilm', prior = prior.2)#
m3.binomial.coop_only.fulldata.qs<- m3.binomial.coop_only(df = d, focal_trait = 'quorum_sensing', prior = prior.2)#
m3.binomial.coop_only.fulldata.ab<- m3.binomial.coop_only(df = d, focal_trait = 'ab_degradation', prior = prior.2)#
m3.binomial.coop_only.fulldata.sid<- m3.binomial.coop_only(df = d, focal_trait = 'siderophores', prior = prior.2)#
m3.binomial.coop_only.fulldata.ssy<- m3.binomial.coop_only(df = d, focal_trait = 'secretion_system', prior = prior.2)#
m3.binomial.coop_only.fulldata.sec<- m3.binomial.coop_only(df = d, focal_trait = 'nb_extracellular', prior = prior.2)#
#
# UNIVARIATE, TRIMMED DATA#
m3.binomial.coop_only.fulldata.bio<- m3.binomial.coop_only(df = d.trim, focal_trait = 'biofilm', prior = prior.2)#
m3.binomial.coop_only.fulldata.qs<- m3.binomial.coop_only(df = d.trim, focal_trait = 'quorum_sensing', prior = prior.2)#
m3.binomial.coop_only.fulldata.ab<- m3.binomial.coop_only(df = d.trim, focal_trait = 'ab_degradation', prior = prior.2)#
m3.binomial.coop_only.fulldata.sid<- m3.binomial.coop_only(df = d.trim, focal_trait = 'siderophores', prior = prior.2)#
m3.binomial.coop_only.fulldata.ssy<- m3.binomial.coop_only(df = d.trim, focal_trait = 'secretion_system', prior = prior.2)#
m3.binomial.coop_only.fulldata.sec<- m3.binomial.coop_only(df = d.trim, focal_trait = 'nb_extracellular', prior = prior.2)
summary(m3.binomial.coop_only.fulldata.sec)
summary(m3.binomial.coop_only.fulldata.ssy)
summary(m3.binomial.coop_only.fulldata.sid)
summary(m3.binomial.coop_only.fulldata.ab)
summary(m3.binomial.coop_only.fulldata.qs)
summary(m3.binomial.coop_only.fulldata.bio)
save.image('~/Desktop/my_cfr_09022021.RData')
m3.binomial.coop_only.trimdata.bio<- m3.binomial.coop_only.fullata.bio#
m3.binomial.coop_only.trimdata.qs<- m3.binomial.coop_onlyfulldata.qs#
m3.binomial.coop_only.trimdata.ab<- m3.binomial.coop_onlyfulldata.ab#
m3.binomial.coop_only.trimdata.sid<- m3.binomial.coop_only.fullata.sid#
m3.binomial.coop_only.trimdata.ssy<- m3.binomial.coop_only.fullata.ssy#
m3.binomial.coop_only.trimdata.sec<- m3.binomial.coop_only.fullata.sec
m3.binomial.coop_only.trimdata.bio<- m3.binomial.coop_only.fulldata.bio#
m3.binomial.coop_only.trimdata.qs<- m3.binomial.coop_only.fulldata.qs#
m3.binomial.coop_only.trimdata.ab<- m3.binomial.coop_only.fulldata.ab#
m3.binomial.coop_only.trimdata.sid<- m3.binomial.coop_only.fulldata.sid#
m3.binomial.coop_only.trimdata.ssy<- m3.binomial.coop_only.fulldata.ssy#
m3.binomial.coop_only.trimdata.sec<- m3.binomial.coop_only.fulldata.sec
rm(m3.binomial.coop_only.fulldata.bio)#
rm(m3.binomial.coop_only.fulldata.qs)#
rm(m3.binomial.coop_only.fulldata.ab)#
rm(m3.binomial.coop_only.fulldata.sid)#
rm(m3.binomial.coop_only.fulldata.ssy)#
rm(m3.binomial.coop_only.fulldata.sec)
save.image('~/Desktop/my_cfr_09022021.RData')
m3.binomial.coop_only.fulldata.bio<- m3.binomial.coop_only(df = d, focal_trait = 'biofilm', prior = prior.2)#
m3.binomial.coop_only.fulldata.qs<- m3.binomial.coop_only(df = d, focal_trait = 'quorum_sensing', prior = prior.2)#
m3.binomial.coop_only.fulldata.ab<- m3.binomial.coop_only(df = d, focal_trait = 'ab_degradation', prior = prior.2)#
m3.binomial.coop_only.fulldata.sid<- m3.binomial.coop_only(df = d, focal_trait = 'siderophores', prior = prior.2)#
m3.binomial.coop_only.fulldata.ssy<- m3.binomial.coop_only(df = d, focal_trait = 'secretion_system', prior = prior.2)#
m3.binomial.coop_only.fulldata.sec<- m3.binomial.coop_only(df = d, focal_trait = 'nb_extracellular', prior = prior.2)
save.image('~/Desktop/my_cfr_09022021.RData')
summary(m3.binomial.coop_only.fulldata.bio)
summary(m3.binomial.coop_only.trimdata.bio)
summary(m3.binomial.coop_only.fulldata.bio)
summary(m3.binomial.coop_only.trimdata.bio)
summary(m3.binomial.coop_only.fulldata.bio)
summary(m3.binomial.coop_only.trimdata.bio)
summary(m3.binomial.coop_only.fulldata.qs)
summary(m3.binomial.coop_only.fulldata.ab)
summary(m3.binomial.coop_only.fulldata.sid)
summary(m3.binomial.coop_only.fulldata.ssy)
summary(m3.binomial.coop_only.fulldata.sec)
summary(m3.binomial.coop_only.fulldata.sid)
summary(m3.binomial.coop_only.trimdata.sid)
summary(m3.binomial.coop_only.trimdata.ssy)
save.image('~/Desktop/my_cfr_09022021.RData')
z.transform<- function(x){(x - mean(x))/sd(x)}#
#
d$z_nb_cds<- z.transform(d$nb_cds)#
d$z_biofilm<- z.transform(d$biofilm)#
d$z_quorum_sensing<- z.transform(d$quorum_sensing)#
d$z_ab_degradation<- z.transform(d$ab_degradation)#
d$z_secretion_system<- z.transform(d$secretion_system)#
d$z_siderophores<- z.transform(d$siderophores)#
d$z_nb_extracellular<- z.transform(d$nb_extracellular)
m3.binomial.coop_only.fulldata.multi<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular,#
                        random = ~supfam_id+species,#+cohort,#
                        ginverse = list(supfam_id=Ainv),#
                        data = d,#
                        prior = prior.2,#
                        family=c("multinomial2"), trunc=T,#
                        start=list(QUASI=FALSE),#
                        #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                        DIC = TRUE,#
                        nitt=nitt, thin=thin, burnin=burnin)#
m3.binomial.coop_only.trimdata.multi<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular,#
                                                random = ~supfam_id+species,#+cohort,#
                                                ginverse = list(supfam_id=Ainv),#
                                                data = d.trim,#
                                                prior = prior.2,#
                                                family=c("multinomial2"), trunc=T,#
                                                start=list(QUASI=FALSE),#
                                                #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                DIC = TRUE,#
                                                nitt=nitt, thin=thin, burnin=burnin)
d.trim$z_nb_cds<- z.transform(d.trim$nb_cds)#
d.trim$z_biofilm<- z.transform(d.trim$biofilm)#
d.trim$z_quorum_sensing<- z.transform(d.trim$quorum_sensing)#
d.trim$z_ab_degradation<- z.transform(d.trim$ab_degradation)#
d.trim$z_secretion_system<- z.transform(d.trim$secretion_system)#
d.trim$z_siderophores<- z.transform(d.trim$siderophores)#
d.trim$z_nb_extracellular<- z.transform(d.trim$nb_extracellular)
m3.binomial.coop_only.trimdata.multi<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular,#
                                                random = ~supfam_id+species,#+cohort,#
                                                ginverse = list(supfam_id=Ainv),#
                                                data = d.trim,#
                                                prior = prior.2,#
                                                family=c("multinomial2"), trunc=T,#
                                                start=list(QUASI=FALSE),#
                                                #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                DIC = TRUE,#
                                                nitt=nitt, thin=thin, burnin=burnin)
nitt
summary(m3.binomial.coop_only.fulldata.multi)
summary(m3.binomial.coop_only.trimdata.multi)
save.image('~/Desktop/my_cfr_09022021.RData')
head(d)
my.cfr<- read_excel('~/Desktop/my_cfr/cfr_data_cases.xlsx', sheet = 'my_cfr',#
                    col_types = c('text', 'text', 'numeric', 'numeric', 'numeric', 'text', 'numeric'))#
#
my.cfr.coop<- read_excel('~/Desktop/my_cfr/cfr_data_cases.xlsx', sheet = 'coop_data_for_my_cfr') %>%#
  select(species2, genome_name, supfam_id, gram_profile, nb_extracellular, nb_cds, biofilm, ab_degradation, quorum_sensing, siderophores, secretion_system, vf) %>%#
  rename(species = species2)#
my.cfr2<- left_join(my.cfr, my.cfr.coop, by = 'species')
tree<- read.tree('/Users/s1687811/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/data/species_info_files/hm_supfam_tree_129.newick')#
tree#
#
unique(my.cfr2$supfam_id)[!unique(my.cfr2$supfam_id) %in% tree$tip.label]#
#View(my.cfr2[my.cfr2$supfam_id == 'fz',])#
#
# drop the species "fz", for which I don't have the supfam id in the tree#
my.cfr2<- my.cfr2[my.cfr2$supfam_id != 'fz',]
tree$tip.label#
tree<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% my.cfr2$supfam_id])#
phylogeny<- chronopl(tree, lambda = 1)#
plot(phylogeny) # ultrametricised tree#
phylogeny<-makeNodeLabel(phylogeny)#
Ainv<-inverseA(phylogeny, scale=FALSE)$Ainv
my.cfr2$alive<- my.cfr2$cases - my.cfr2$death#
#
my.cfr2<-my.cfr2 %>%#
  rename(total_alive = alive,#
         total_deaths = death,#
         total_cases =  cases)#
#
my.cfr2.trim<- my.cfr2 %>%#
  filter(numbers_estimated_and_population_data == 0) # same number of species, just some  studies removed#
#
ggplot(my.cfr2, aes(x = quorum_sensing, y = total_deaths/total_cases, col = as.factor(numbers_estimated_and_population_data)))+#
  geom_point()#
  geom_jitter(width = 0.1, height = 0.1)#+#
  #geom_text(aes(label=species),hjust=0, vjust=0)
m<- glm(cbind(total_deaths, total_alive) ~ nb_cds + nb_extracellular , family = 'binomial', data = my.cfr2) # ***, negative#
m<- glmer(cbind(total_deaths, total_alive) ~ nb_cds + nb_extracellular + (1|source), family = 'binomial', data = my.cfr2) # ***, pos#
m<- glmer(cbind(total_deaths, total_alive) ~ nb_cds + nb_extracellular + (1|species), family = 'binomial', data = my.cfr2) # ns#
summary(m)
prior.3 <- list(R = list(R1 = list(V = diag(1), nu = 0.002)), # residual, for binomial (not binary!) data, it can be estimated, I think#
                G = list(G1 = list(V = diag(1), nu = 1000, alpha.mu = rep(0,1), alpha.V = diag(1)),  # phylo#
                         G2 = list(V = diag(1), nu = 1000, alpha.mu = rep(0,1), alpha.V = diag(1)),  # non-phylo#
                         G3 = list(V = diag(1), nu = 1000, alpha.mu = rep(0,1), alpha.V = diag(1)))) # cohort#
#
div = 10#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
my.cfr2<- as.data.frame(my.cfr2)#
my.cfr2.trim<- as.data.frame(my.cfr2.trim)
m3.binomial.mycfr.coop_only <-function(df, focal_trait, prior){#
  d.tmp<- df#
  colnames(d.tmp)[which(colnames(d.tmp) == focal_trait)]<- 'focal_trait'#
  m<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + nb_cds + focal_trait ,#
               random = ~supfam_id+species+source, #supfam used for the Ainv matrix, #
               ginverse = list(supfam_id=Ainv),#
               data = d.tmp,#
               prior = prior,#
               family=c("multinomial2"), trunc=T,#
               start=list(QUASI=FALSE),#
               #pl = TRUE, pr = TRUE, nodes = 'ALL',#
               DIC = TRUE,#
               nitt=nitt, thin=thin, burnin=burnin)#
  return(m)#
}
# UNIVARIATE, FUL DATA ----#
m3.binomial.coop_only.mycfr.fulldata.bio<- m3.binomial.mycfr.coop_only(df = my.cfr2, focal_trait = 'biofilm', prior = prior.3)#
m3.binomial.coop_only.mycfr.fulldata.qs<- m3.binomial.mycfr.coop_only(df = my.cfr2, focal_trait = 'quorum_sensing', prior = prior.3)#
m3.binomial.coop_only.mycfr.fulldata.ab<- m3.binomial.mycfr.coop_only(df = my.cfr2, focal_trait = 'ab_degradation', prior = prior.3)#
m3.binomial.coop_only.mycfr.fulldata.sid<- m3.binomial.mycfr.coop_only(df = my.cfr2, focal_trait = 'siderophores', prior = prior.3)#
m3.binomial.coop_only.mycfr.fulldata.ssy<- m3.binomial.mycfr.coop_only(df = my.cfr2, focal_trait = 'secretion_system', prior = prior.3)#
m3.binomial.coop_only.mycfr.fulldata.sec<- m3.binomial.mycfr.coop_only(df = my.cfr2, focal_trait = 'nb_extracellular', prior = prior.3)#
# UNIVARIATE, TRIMMED DATA ----#
m3.binomial.coop_only.mycfr.trimdata.bio<- m3.binomial.mycfr.coop_only(df = my.cfr2.trim, focal_trait = 'biofilm', prior = prior.3)#
m3.binomial.coop_only.mycfr.trimdata.qs<- m3.binomial.mycfr.coop_only(df = my.cfr2.trim, focal_trait = 'quorum_sensing', prior = prior.3)#
m3.binomial.coop_only.mycfr.trimdata.ab<- m3.binomial.mycfr.coop_only(df = my.cfr2.trim, focal_trait = 'ab_degradation', prior = prior.3)#
m3.binomial.coop_only.mycfr.trimdata.sid<- m3.binomial.mycfr.coop_only(df = my.cfr2.trim, focal_trait = 'siderophores', prior = prior.3)#
m3.binomial.coop_only.mycfr.trimdata.ssy<- m3.binomial.mycfr.coop_only(df = my.cfr2.trim, focal_trait = 'secretion_system', prior = prior.3)#
m3.binomial.coop_only.mycfr.trimdata.sec<- m3.binomial.mycfr.coop_only(df = my.cfr2.trim, focal_trait = 'nb_extracellular', prior = prior.3)#
save.image('~/Desktop/my_cfr_09022021.RData')
z.transform<- function(x){(x - mean(x))/sd(x)}#
#
my.cfr2$z_nb_cds<- z.transform(my.cfr2$nb_cds)#
my.cfr2$z_biofilm<- z.transform(my.cfr2$biofilm)#
my.cfr2$z_quorum_sensing<- z.transform(my.cfr2$quorum_sensing)#
my.cfr2$z_ab_degradation<- z.transform(my.cfr2$ab_degradation)#
my.cfr2$z_secretion_system<- z.transform(my.cfr2$secretion_system)#
my.cfr2$z_siderophores<- z.transform(my.cfr2$siderophores)#
my.cfr2$z_nb_extracellular<- z.transform(my.cfr2$nb_extracellular)#
my.cfr2.trim$z_nb_cds<- z.transform(my.cfr2.trim$nb_cds)#
my.cfr2.trim$z_biofilm<- z.transform(my.cfr2.trim$biofilm)#
my.cfr2.trim$z_quorum_sensing<- z.transform(my.cfr2.trim$quorum_sensing)#
my.cfr2.trim$z_ab_degradation<- z.transform(my.cfr2.trim$ab_degradation)#
my.cfr2.trim$z_secretion_system<- z.transform(my.cfr2.trim$secretion_system)#
my.cfr2.trim$z_siderophores<- z.transform(my.cfr2.trim$siderophores)#
my.cfr2.trim$z_nb_extracellular<- z.transform(my.cfr2.trim$nb_extracellular)
m3.binomial.coop_only.mycfr.fulldata.multi<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular,#
                                                random = ~supfam_id+species+source,#
                                                ginverse = list(supfam_id=Ainv),#
                                                data = my.cfr2,#
                                                prior = prior.3,#
                                                family=c("multinomial2"), trunc=T,#
                                                start=list(QUASI=FALSE),#
                                                #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                DIC = TRUE,#
                                                nitt=nitt, thin=thin, burnin=burnin)#
m3.binomial.coop_only.mycfr.trimdata.multi<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular,#
                                                random = ~supfam_id+species+source,#
                                                ginverse = list(supfam_id=Ainv),#
                                                data = my.cfr2.trim,#
                                                prior = prior.3,#
                                                family=c("multinomial2"), trunc=T,#
                                                start=list(QUASI=FALSE),#
                                                #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                DIC = TRUE,#
                                                nitt=nitt, thin=thin, burnin=burnin)
save.image('~/Desktop/my_cfr_09022021.RData')
library(readxl)#
library(dplyr)#
library(tidyr)#
library(ggplot2)#
#
# Sanity check on reads processing#
logs<- read_excel('~/Desktop/CASECONTROL/data_CC_04Feb/pipeline_processing.xlsx', sheet = 'hosts_with_SNPS_output')#
logs2<- logs %>% gather('step', 'nb_reads', 2:3)#
head(logs2)#
ggplot(logs2, aes(x = step, y = nb_reads))+#
  geom_boxplot()#
summary(logs$nb_reads_processed)#
#
logs<- rename(logs, host = host_with_SNPS_output)#
#
cohorts<- do.call('rbind', strsplit(logs$host, '_'))[,1]#
table(cohorts)
logs$cohort<- cohorts#
logs[logs$cohort == 'KAZAK',]#
# METADATA ----#
#
md<- read.table('~/Desktop/CASECONTROL/data_CC_04Feb/assembled_CC_SRA.txt', header=TRUE, sep = '\t',#
                na.strings = c('NA', 'N/A'),#
                colClasses = c(rep('character', 6), 'character', 'character', rep('character', 3))) %>%#
  select(-run, -BioSample, -BioProject) %>%#
  unique()#
#
is.numeric(md$age)#
is.numeric(md$bmi)#
# Recode gender#
md$gender<- gsub('Female', 'female', md$gender)#
md$gender<- gsub('Male', 'male', md$gender)#
md$gender<- gsub('F', 'female', md$gender)#
md$gender<- gsub('M', 'male', md$gender)#
md$gender<- gsub('N/A', NA, md$gender, fixed = TRUE)#
unique(md$gender)#
# Recorde country#
unique(md$country)#
md$country<- gsub('ESP', 'SPA', md$country)#
md$country<- gsub('spanish', 'SPA', md$country)#
md$country<- gsub('Kazakhstan', 'KZA', md$country)#
md$country<- gsub('Chinese', 'CHN', md$country)#
md$country<- gsub('China', 'CHN', md$country)#
md$country<- gsub('china', 'CHN', md$country)#
md$country<- gsub('Gothenburg', 'SWE', md$country)#
md$country<- gsub('Germany', 'GER', md$country)#
md$country<- gsub('France', 'FRA', md$country)#
unique(md$country)#
# Record BMI and Age and set back to numeric#
unique(md$bmi)#
md$bmi<- gsub('N/A', 'NA', md$bmi)#
md$bmi<- gsub('>30', '31', md$bmi)#
md$bmi<- gsub('<23', '22', md$bmi)#
md$bmi<- as.numeric(md$bmi)#
#
md$age<- gsub('Adult', 'NA', md$age)#
md$age<- gsub('N/A', 'NA', md$age)#
md$age<- as.numeric(md$age)#
# Record phenotypes#
unique(md$phenotype)#
md$phenotype<- gsub('Ulcerative colitis', 'UC', md$phenotype)#
md$phenotype<- gsub('Crohns disease', 'CD', md$phenotype)#
md$phenotype<- gsub('Healthy relative', 'Healthy', md$phenotype)#
md$phenotype<- gsub('hypertension', 'HYPER', md$phenotype)#
md$phenotype<- gsub('pre-hypertension', 'preHYPER', md$phenotype)#
md$phenotype<- gsub('cirrhosis', 'LC', md$phenotype)#
md$phenotype<- gsub('Obesity', 'OBE', md$phenotype)#
md$phenotype<- gsub('rheumatoid_arthritis', 'RA', md$phenotype)#
#
# MH richness only healthy, classify BMI > 30 as obese#
md[which(md$cohort == 'MHRICH' & md$bmi > 30), 'phenotype'] <- 'OBE'#
#
# Make binary caseControl variable#
md$caseControl<- ifelse(md$phenotype == 'Healthy', 1, 0)#
#
# Filter out the healthy which are actually obese#
md<- md[-which(md$phenotype == 'Healthy' & md$bmi > 30), ]#
length(unique(md$host))
length(unique(md$host))
# RELATEDNESS AND SPORULATION ----#
r.df<- read.table('~/Desktop/CASECONTROL/data_CC_04Feb/relatednes_sporulation.txt', header = TRUE, sep = '\t')#
nrow(r.df) # 101 species#
# Load abundance tablee#
prob.df<- read.table('~/Desktop/CASECONTROL/data_CC_04Feb/assembled_species_profiles.txt', header=FALSE, sep = '\t', colClasses = c('character', 'numeric', 'numeric', 'numeric', 'character'))#
colnames(prob.df)<- c('species_id', 'count_reads', 'coverage', 'within_host_relative_abundance', 'host')#
prob.df<-  prob.df[,c('species_id','within_host_relative_abundance', 'host')]#
# Adding MetS samples from old batch#
# MetS missing for now, use my old output for those instead#
old<- read.table('~/Desktop/CASECONTROL/data_CC_04Feb/OLD_assembled_species_profiles.txt', sep = '\t')#
colnames(old)<- c('species_id', 'count_reads', 'coverage', 'within_host_relative_abundance', 'host')#
old.kza<- old[which(substr(old$host, 1, 4) %in% c('713A', '713B')), ]#
old.kza$host<- paste0('KAZAK_', old.kza$host, '1100')#
old.kza<- old.kza %>% select(species_id, within_host_relative_abundance,  host)#
head(old.kza)#
head(prob.df)#
#
# remove the one kazak sample from mew prob.df, then append old kazaks to prob.df#
length(unique(prob.df$host)) # 3074 for which I had an output#
prob.df<- prob.df[prob.df$host != 'KAZAK_713A0331100',]#
length(unique(prob.df$host)) # 3073 now#
prob.df<- rbind(prob.df, old.kza)#
# Check that table is complete#
length(unique(prob.df$host))  # 3074-1+86 = 3159 host for which we have an SNPS output#
length(unique(prob.df$host)) * length(unique(prob.df$species_id)) # nbrows ok#
# Assemble relative abundance and metadata#
d<- inner_join(prob.df, md, by = 'host')
# Select subset of focal 101 species#
d.101<- d %>% filter(species_id %in% r.df$species_id)#
length(unique(d.101$species_id)) # 101 species#
length(unique(d.101$host))       # 3159 hosts , actually 3103 when filtering out the Healthy obese#
# Check number of species found in hosts, filter out host with suspicioulsy low number of species#
check<- d.101 %>%#
  select(host, cohort, species_id, within_host_relative_abundance, phenotype) %>%#
  spread(species_id, within_host_relative_abundance)#
rowSums(check[,4:104])#
check$nb_sp<- rowSums(check[,4:104] > 0)#
check<- check[,c(1:3, 105)]#
check<- arrange(check, nb_sp)#
check<- left_join(check, logs, by = 'host')#
ggplot(check, aes(x = nb_reads_processed, y = nb_sp))+#
  geom_point()
md.select<- unique(d.101[,3:11]) # coding: '1' is healthy, '0' is sick#
table(md.select$caseControl)
table(md.select$phenotype, md.select$cohort) # Some studies have 2 disease phenotypes
# filter out adenoma and prehyper#
d.101.trim<- d.101 %>% filter(!phenotype %in% c('adenoma', 'pre-HYPER'))#
# filter out CD from MHMGS#
d.101.trim<- d.101.trim[-which(d.101.trim$phenotype == 'CD' & d.101.trim$cohort == 'MHMGS'),]#
# filter out UC from iHMPIBD#
d.101.trim<- d.101.trim[-which(d.101.trim$phenotype == 'UC' & d.101.trim$cohort == 'iHMPIBD'),]#
# filter out T2D from MHIGC#
d.101.trim<- d.101.trim[-which(d.101.trim$phenotype == 'T2D' & d.101.trim$cohort == 'MHIGC'),]#
# filter out T2D from SWEDISH#
d.101.trim<- d.101.trim[-which(d.101.trim$phenotype == 'T2D' & d.101.trim$cohort == 'SWEDISH'),]#
# Set disease variable#
#
d.101.trim$disease = NA#
#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINAJIEZ', 'SWEDACVD')]<- 'ACVD'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINAYEZ')]<- 'BD'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINACRCYU', 'ITCRC', 'USCRC', 'AUTCRCFENG', 'FGCRC')]<- 'CRC'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINAHYPER')]<- 'HYPER'#
d.101.trim$disease[d.101.trim$cohort %in% c('MHMGS')]<- 'UC'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINAIBD', 'iHMPIBD')]<- 'CD'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINALC')]<- 'LC'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINAOB', 'MHRICH')]<- 'OBE'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINARA')]<- 'RA'#
d.101.trim$disease[d.101.trim$cohort %in% c('MHIGC')]<- 'T1D'#
d.101.trim$disease[d.101.trim$cohort %in% c('CHINAQINJ')]<- 'T2D'#
d.101.trim$disease[d.101.trim$cohort %in% c('SWEDISH')]<- 'IGT'#
d.101.trim$disease[d.101.trim$cohort %in% c('KAZAK')]<- 'MetS'#
md.select.trim<- unique(d.101.trim[,3:12]) # coding: '1' is healthy, '0' is sick#
nrow(md.select.trim) # 2768, i.e. : 3103 - 10 (CD from MHMGS) - 35 (UC from iHMPIBD) - 73 (T2D from MHIGC) - 51 (T2D from SWEDISH) - 110 (adenoma) - 56 (preHYPER) = 2768#
table(md.select.trim$caseControl)
head(check)
table(md.select.trim$phenotype, md.select.trim$cohort) # Now all studies have a single disease
# COMPUTE GUT COMMUNITY RELATEDNESS AND SPORULATION#
# Make abundance matrix: one column per species, one row per host#
prob<- d.101.trim %>%#
  select(host, species_id, within_host_relative_abundance) %>%#
  spread(species_id, within_host_relative_abundance) %>%#
  select(r.df$species_id) %>% # Order columns in same order as relatedness dataframe#
  as.matrix()#
# Cumulative relative abundance covered by these 101 species#
dim(prob)#
cum.101<- rowSums(prob)#
hist(cum.101, xlab = 'Cumulative abundance of our 101 species') # some hosts microbiomes is poorly covered by this set of 101 species #
#
# Rescale the relative abundance over that  set of 101 species#
prob.rescaled<- prob/cum.101#
#
# Multiply the rescaled relative abundance matrix by  the vectors of Relatedness, Sporulation and Relatedness*Sporulation#
probr.rescaled<- t(t(prob.rescaled)*r.df$mean_relatedness)    # mean R#
probspo.rescaled<- t(t(prob.rescaled)*r.df$sporulation_score) # mean SPO#
probrspo.rescaled<- t(t(prob.rescaled)*(r.df$mean_relatedness*r.df$sporulation_score)) # mean (R*SPO)#
# Final data assembly#
dat.rescaled<- d.101.trim %>%#
  select(host, cohort, disease, phenotype, species_id, within_host_relative_abundance, caseControl) %>%#
  spread(species_id, within_host_relative_abundance) %>%#
  select(host, cohort, disease, phenotype, caseControl)#
#
# Append the mean gut relatedness predictor variables#
dat.rescaled$NR = rowSums(probr.rescaled)     # mean R#
dat.rescaled$NSPO = rowSums(probspo.rescaled) # mean SPO#
dat.rescaled$NRSPO = rowSums(probrspo.rescaled) # mean (R*SPO)#
dat.rescaled$nb_sp = rowSums(prob.rescaled != 0)#
dat.rescaled$cum.101 = cum.101#
range(dat.rescaled$nb_sp) # 5-92 species in hosts
# Append the relative abundance matrix (prob) and relative abundance matrix  * R (probr) to dataframe#
dat.rescaled$prob = prob.rescaled#
dat.rescaled$probr =  probr.rescaled#
#d
save('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2_dataPreps.RData')
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2_dataPreps.RData')
prior.u1<-list(R=list(V=1, fix=1),#
               G=list(G1=list(V=1, nu=1, alpha.mu=0, alpha.V=100)))#
#
prior.u2<-list(R=list(V=1, fix=1),#
              G=list(G1=list(V=1, nu=1, alpha.mu=0, alpha.V=100),#
                     G2=list(V=1, nu=1, alpha.mu=0, alpha.V=100)))
div = 100#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
prior.u1<-list(R=list(V=1, fix=1),#
               G=list(G1=list(V=1, nu=1, alpha.mu=0, alpha.V=100)))#
#
prior.u2<-list(R=list(V=1, fix=1),#
              G=list(G1=list(V=1, nu=1, alpha.mu=0, alpha.V=100),#
                     G2=list(V=1, nu=1, alpha.mu=0, alpha.V=100)))
m.fan.prob<-MCMCglmm(caseControl~1,#
                     random=~idv(prob),#
                     data=dat.rescaled,#
                     family="threshold",#
                     prior=prior.u1,#
                     nitt = nitt, burnin =  burnin, thin = thin)
library(MCMCglmm)
m.fan.prob<-MCMCglmm(caseControl~1,#
                     random=~idv(prob),#
                     data=dat.rescaled,#
                     family="threshold",#
                     prior=prior.u1,#
                     nitt = nitt, burnin =  burnin, thin = thin)
save('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2.RData')
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2.RData')
m.fan.prob.probr<-MCMCglmm(caseControl~1,#
                     random=~idv(prob)+idv(probr),#
                     data=dat.rescaled,#
                     family="threshold",#
                     prior=prior.u2,#
                     nitt = nitt, burnin =  burnin, thin = thin)
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2.RData')
m.fan.prob.NR<-MCMCglmm(caseControl~1+NR,#
                     random=~idv(prob),#
                     data=dat.rescaled,#
                     family="threshold",#
                     prior=prior.u1,#
                     nitt = nitt, burnin =  burnin, thin = thin)
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2.RData')#
#
m.fan.prob.probr.NR<-MCMCglmm(caseControl~1+NR,#
                     random=~idv(prob)+idv(probr),#
                     data=dat.rescaled,#
                     family="threshold",#
                     prior=prior.u2,#
                     nitt = nitt, burnin =  burnin, thin = thin)#
#
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2.RData')
library(readxl)#
library(dplyr)#
library(tidyr)#
library(ggplot2)
library(MCMCglmm)
load('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2.RData')
summary(m.fan.prob.probr.NR)
summary(m.fan.prob.NR)
summary(m.fan.prob)
prior.r<-list(R=list(V=1, fix=1))
m.multi<-MCMCglmm(caseControl~-1+disease+NR:disease+NRSPO:disease,#
                #random=~idv(prob),#
                data=dat.rescaled,#
                family="threshold",#
                prior=prior.r,#
                nitt = nitt, burnin =  burnin, thin = thin)
plot(m.multi)
rm(m.multi)
div = 1#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
prior.r<-list(R=list(V=1, fix=1))
nitt
m.multi<-MCMCglmm(caseControl~-1+disease+NR:disease+NRSPO:disease,#
                #random=~idv(prob),#
                data=dat.rescaled,#
                family="threshold",#
                prior=prior.r,#
                nitt = nitt, burnin =  burnin, thin = thin)
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2_dataPreps.RData')
nitt
div = 100#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
prior.r<-list(R=list(V=1, fix=1))
m.across<-MCMCglmm(caseControl~1+NR+NRSPO,#
                  #random=~idv(prob),#
                  data=dat.rescaled,#
                  family="threshold",#
                  prior=prior.r,#
                  nitt = nitt, burnin =  burnin, thin = thin)
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2_dataPreps.RData')
summary(m.across)
prior.u1<-list(R=list(V=1, fix=1),#
               G=list(G1=list(V=1, nu=1, alpha.mu=0, alpha.V=100)))
m.across.2<-MCMCglmm(caseControl~1+NR+NRSPO,#
                   random=~cohort#
                   data=dat.rescaled,#
                   family="threshold",#
                   prior=prior.u1,#
                   nitt = nitt, burnin =  burnin, thin = thin)
m.across.2<-MCMCglmm(caseControl~1+NR+NRSPO,#
                   random=~cohort,#
                   data=dat.rescaled,#
                   family="threshold",#
                   prior=prior.u1,#
                   nitt = nitt, burnin =  burnin, thin = thin)
summary(m.across.2)
save.image('~/Documents/PhD/Research/HamiltonianMedicine/HamiltonianMedicineMicrobiome/output/model_output/M4_11022021_V2_dataPreps.RData')
library(vegan)
m<- matrix(c(0.8, 0.7, 0, 0.1, 0, 0, 0, 1, 0), ncol = 3, byrow = TRUE)
m
specnumber(m)
library(dplyr)#
library(ggplot2)#
library(lme4)#
library(nlme)#
library(readxl)#
library(ape)#
library(MCMCglmm)
load('~/Desktop/my_cfr_09022021.RData')
summary(m3.binomial.coop_growth_route.mycfr.fulldata.sec)
head(my.cfr2[!is.na(my.cfr2$generation_time_h),])
nitt
m3.binomial.coop_growth_route.mycfr.fulldata.vf<- m3.binomial.mycfr.coop_growth_route(df = my.cfr2[!is.na(my.cfr2$generation_time_h),], focal_trait = 'vf', prior = prior.3)
summary(binomial.coop_growth_route.mycfr.fulldata.vf)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.vf)
plot(m3.binomial.coop_growth_route.mycfr.fulldata.vf)
m3.binomial.coop_only.mycfr.trimdata.multi.with_vf<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular + z_vf,#
                                                random = ~supfam_id+species+source,#
                                                ginverse = list(supfam_id=Ainv),#
                                                data = my.cfr2.trim,#
                                                prior = prior.3,#
                                                family=c("multinomial2"), trunc=T,#
                                                start=list(QUASI=FALSE),#
                                                #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                DIC = TRUE,#
                                                nitt=nitt, thin=thin, burnin=burnin)
my.cfr2.2<- my.cfr2[!is.na(my.cfr2$generation_time_h),]
my.cfr2.2$z_nb_cds<- z.transform(my.cfr2.2$nb_cds)#
my.cfr2.2$z_biofilm<- z.transform(my.cfr2.2$biofilm)#
my.cfr2.2$z_quorum_sensing<- z.transform(my.cfr2.2$quorum_sensing)#
my.cfr2.2$z_ab_degradation<- z.transform(my.cfr2.2$ab_degradation)#
my.cfr2.2$z_secretion_system<- z.transform(my.cfr2.2$secretion_system)#
my.cfr2.2$z_siderophores<- z.transform(my.cfr2.2$siderophores)#
my.cfr2.2$z_nb_extracellular<- z.transform(my.cfr2.2$nb_extracellular)#
my.cfr2.2$z_generation_time_h<- z.transform(my.cfr2.2$generation_time_h)#
my.cfr2.2$z_vf<- z.transform(my.cfr2.2$vf)#
my.cfr2.2.trim<- my.cfr2.trim[!is.na(my.cfr2.trim$generation_time_h),]#
my.cfr2.2.trim$z_nb_cds<- z.transform(my.cfr2.2.trim$nb_cds)#
my.cfr2.2.trim$z_biofilm<- z.transform(my.cfr2.2.trim$biofilm)#
my.cfr2.2.trim$z_quorum_sensing<- z.transform(my.cfr2.2.trim$quorum_sensing)#
my.cfr2.2.trim$z_ab_degradation<- z.transform(my.cfr2.2.trim$ab_degradation)#
my.cfr2.2.trim$z_secretion_system<- z.transform(my.cfr2.2.trim$secretion_system)#
my.cfr2.2.trim$z_siderophores<- z.transform(my.cfr2.2.trim$siderophores)#
my.cfr2.2.trim$z_nb_extracellular<- z.transform(my.cfr2.2.trim$nb_extracellular)#
my.cfr2.2.trim$z_generation_time_h<- z.transform(my.cfr2.2.trim$generation_time_h)#
my.cfr2.2.trim$z_vf<- z.transform(my.cfr2.2.trim$vf)
m3.binomial.coop_growth_route.mycfr.fulldata.multi.with_vf<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + infection_route + z_generation_time_h + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular + z_vf,#
                                                              random = ~supfam_id+species+source,#
                                                              ginverse = list(supfam_id=Ainv),#
                                                              data = my.cfr2.2,#
                                                              prior = prior.3,#
                                                              family=c("multinomial2"), trunc=T,#
                                                              start=list(QUASI=FALSE),#
                                                              #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                              DIC = TRUE,#
                                                              nitt=nitt, thin=thin, burnin=burnin)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.ab)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.ssy)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.sec)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.ab)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.vf)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.multi.with_vf)
summary(summary(m3.binomial.coop_growth_route.mycfr.fulldata.multi))
summary(m3.binomial.coop_growth_route.mycfr.fulldata.multi)
summary(m3.binomial.coop_growth_route.mycfr.trimdata.multi)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.multi.with_vf)
plot(m3.binomial.coop_growth_route.mycfr.fulldata.multi.with_vf)
m3.binomial.coop_growth_route.mycfr.fulldata.multi<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + infection_route + z_generation_time_h + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular,#
                                                              random = ~supfam_id+species+source,#
                                                              ginverse = list(supfam_id=Ainv),#
                                                              data = my.cfr2.2,#
                                                              prior = prior.3,#
                                                              family=c("multinomial2"), trunc=T,#
                                                              start=list(QUASI=FALSE),#
                                                              #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                              DIC = TRUE,#
                                                              nitt=nitt, thin=thin, burnin=burnin)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.multi)
nitt
div = 1#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin
m3.binomial.coop_growth_route.mycfr.fulldata.multi.with_vf<- MCMCglmm(cbind(total_deaths, total_alive)  ~ 1 + infection_route + z_generation_time_h + z_nb_cds + z_biofilm + z_quorum_sensing + z_ab_degradation + z_secretion_system + z_siderophores + z_nb_extracellular + z_vf,#
                                                              random = ~supfam_id+species+source,#
                                                              ginverse = list(supfam_id=Ainv),#
                                                              data = my.cfr2.2,#
                                                              prior = prior.3,#
                                                              family=c("multinomial2"), trunc=T,#
                                                              start=list(QUASI=FALSE),#
                                                              #pl = TRUE, pr = TRUE, nodes = 'ALL',#
                                                              DIC = TRUE,#
                                                              nitt=nitt, thin=thin, burnin=burnin)
summary(m3.binomial.coop_growth_route.mycfr.fulldata.multi.with_vf)
save.image('~/Desktop/my_cfr_09022021.RData')
sir_npi_quick_sd <- function(time, state, parameters, npi) {#
  with(as.list(c(state, parameters)), {#
    dSn = -b*(In + (1/a)*Ic)*Sn#
    dSc = -b*(In + (1/a)*Ic)*(1/a)*Sc#
    dIn = b*(In + (1/a)*Ic)*Sn - g * In#
    dIc = b*(In + (1/a)*Ic)*(1/a)*Sc - g * Ic#
    dRn = g * In#
    dRc = g * Ic#
    return(list(c(dSn, dSc, dIn, dIc, dRn, dRc)))})#
}#
sir_npi_quick_tti <- function(time, state, parameters, npi) {#
  with(as.list(c(state, parameters)), {#
    qtest  = (g*tau)/(1 + (g*tau))#
    qtrace = (g*tau)/(2 + (g*tau))#
    # ODE, with replicator dynamic for the S "activated" if x > 1              #
    dSn = -b*(In + Ic  + qtest*Ic_test + qtest*In_test + qtrace*Ic_trace)*Sn#
    dSc = -b*(In + Ic  + qtest*Ic_test + qtest*In_test + qtrace*Ic_trace)*Sc#
    dIn = (1-p_test)*(b*(In + Ic  + qtest*Ic_test + qtest*In_test + qtrace*Ic_trace)*Sn)- g * In#
    dIn_test = (p_test)*(b*(In + Ic  + qtest*Ic_test + qtest*In_test + qtrace*Ic_trace)*Sn)- g * In_test#
    dIc = (1-p_test)*(b*(In + Ic  + qtest*In_test)*Sc)- g * Ic#
    dIc_test = (p_test)*(b*(In + Ic  + qtest*In_test)*Sc)- g * Ic_test#
    dIc_trace = b*(qtest*Ic_test + qtrace*Ic_trace)*Sc - g*Ic_trace#
    dRn  = g * (In + In_test)#
    dRc  = g * (Ic + Ic_test + Ic_trace)#
    return(list(c(dSn, dSc, dIn, dIn_test, dIc, dIc_test, dIc_trace, dRn, dRc)))})#
}#
integral<- function(x, strains){ #
  out<- as.data.frame(x)#
  out_sum<- data.frame(time = out$time, sum = rowSums(as.data.frame(out[,strains])))#
  sum(diff(out_sum$time) * (head(out_sum$sum,-1)+tail(out_sum$sum,-1)))/2#
}#
#
# Epidemic parameters#
r0 = 3   # (reproduction number)#
g = 1/14 # (recovery rate)#
b = r0*g # (transmission rate estimated from R0)#
N = 67886004 # used to define initial condition#
nb_cases_ini = 60000 # number of cases on March 16th when PM first announce to limit contacts = 58286#
#
# Simulation parameters#
time_sim = 800#
timestep = 0.1#
times.run <- seq(0, time_sim, by = timestep)
reductions<- c(0.05, 0.1, 0.25,0.5, 0.75, 0.9, 0.95)#
alphas<- 1/(1-reductions) # corresponds to reduction of beta of 5%, 10%, 25%, 50%, 75%, 90%, 95%#
#
df.sd.list<- vector('list', length = length(alphas))#
#
names(df.sd.list)<- paste0('alpha_', round(alphas, 2))#
#
# Simulation#
#
for(j in 1:length(alphas)){#
  print(j)#
  # redefine a new parameter set with a different alpha and re-initialise an entry of the df.sd.list()#
  pars_sd.focal<- c(b = b, g = g, a = alphas[j], tau = NA,   p_test = NA, x = 0)#
  min = 0.2 # was 0.001, test with 0.1#
  df.sd.list[[j]]<- data.frame(Sn = seq(0+min, 1-min, min),#
                             p_not_infected_c = NA,#
                             p_not_infected_n = NA,#
                             prop_time_not_recovered_c = NA,#
                             prop_time_not_recovered_n = NA)#
  # run through the df.sd.list[[j]] for different initial compliance#
  for(i in 1:nrow(df.sd.list[[j]])){#
    #print(i)#
    # redefine ini at each loop iteration, with different frequencies of compliers#
    ini<- c(Sn = df.sd.list[[j]]$Sn[i] - ((df.sd.list[[j]]$Sn[i]*nb_cases_ini)/N),#
            Sc = (1 - df.sd.list[[j]]$Sn[i]) - (((1 - df.sd.list[[j]]$Sn[i])*nb_cases_ini)/N),#
            In = (df.sd.list[[j]]$Sn[i]*nb_cases_ini)/N,#
            Ic = ((1 - df.sd.list[[j]]$Sn[i])*nb_cases_ini)/N,#
            Rn = 0,#
            Rc = 0)#
    # Run (no burnin phase)#
    out.run<- ode(y = ini, times = times.run, func = sir_npi_quick_sd, parms = pars_sd.focal)#
    out<- out.run#
    # EVALUATE BENEFIT AND COST AT EQUILIBRIUM (tmax), to compute PAYOFFS AFTERWARD#
    # proba that an individual is still susceptible by the end of the epidemic#
    df.sd.list[[j]]$p_not_infected_c[i]<- tail(out, 1)[,c('Sc')]/sum(tail(out, 1)[,c('Sc', 'Ic', 'Rc')]) #
    df.sd.list[[j]]$p_not_infected_n[i]<- tail(out, 1)[,c('Sn')]/sum(tail(out, 1)[,c('Sn', 'In', 'Rn')])#
    # Using integral, average proportion of time individual spent not recovered#
    df.sd.list[[j]]$prop_time_not_recovered_c[i]<- integral(out, c('Sc', 'Ic'))/integral(out, c('Sc', 'Ic', 'Rc')) #
    df.sd.list[[j]]$prop_time_not_recovered_n[i]<- integral(out, c('Sn', 'In'))/integral(out, c('Sn', 'In', 'Rn'))#
  }#
}
library(deSolve)
reductions<- c(0.05, 0.1, 0.25,0.5, 0.75, 0.9, 0.95)#
alphas<- 1/(1-reductions) # corresponds to reduction of beta of 5%, 10%, 25%, 50%, 75%, 90%, 95%#
#
df.sd.list<- vector('list', length = length(alphas))#
#
names(df.sd.list)<- paste0('alpha_', round(alphas, 2))#
#
# Simulation#
#
for(j in 1:length(alphas)){#
  print(j)#
  # redefine a new parameter set with a different alpha and re-initialise an entry of the df.sd.list()#
  pars_sd.focal<- c(b = b, g = g, a = alphas[j], tau = NA,   p_test = NA, x = 0)#
  min = 0.2 # was 0.001, test with 0.1#
  df.sd.list[[j]]<- data.frame(Sn = seq(0+min, 1-min, min),#
                             p_not_infected_c = NA,#
                             p_not_infected_n = NA,#
                             prop_time_not_recovered_c = NA,#
                             prop_time_not_recovered_n = NA)#
  # run through the df.sd.list[[j]] for different initial compliance#
  for(i in 1:nrow(df.sd.list[[j]])){#
    #print(i)#
    # redefine ini at each loop iteration, with different frequencies of compliers#
    ini<- c(Sn = df.sd.list[[j]]$Sn[i] - ((df.sd.list[[j]]$Sn[i]*nb_cases_ini)/N),#
            Sc = (1 - df.sd.list[[j]]$Sn[i]) - (((1 - df.sd.list[[j]]$Sn[i])*nb_cases_ini)/N),#
            In = (df.sd.list[[j]]$Sn[i]*nb_cases_ini)/N,#
            Ic = ((1 - df.sd.list[[j]]$Sn[i])*nb_cases_ini)/N,#
            Rn = 0,#
            Rc = 0)#
    # Run (no burnin phase)#
    out.run<- ode(y = ini, times = times.run, func = sir_npi_quick_sd, parms = pars_sd.focal)#
    out<- out.run#
    # EVALUATE BENEFIT AND COST AT EQUILIBRIUM (tmax), to compute PAYOFFS AFTERWARD#
    # proba that an individual is still susceptible by the end of the epidemic#
    df.sd.list[[j]]$p_not_infected_c[i]<- tail(out, 1)[,c('Sc')]/sum(tail(out, 1)[,c('Sc', 'Ic', 'Rc')]) #
    df.sd.list[[j]]$p_not_infected_n[i]<- tail(out, 1)[,c('Sn')]/sum(tail(out, 1)[,c('Sn', 'In', 'Rn')])#
    # Using integral, average proportion of time individual spent not recovered#
    df.sd.list[[j]]$prop_time_not_recovered_c[i]<- integral(out, c('Sc', 'Ic'))/integral(out, c('Sc', 'Ic', 'Rc')) #
    df.sd.list[[j]]$prop_time_not_recovered_n[i]<- integral(out, c('Sn', 'In'))/integral(out, c('Sn', 'In', 'Rn'))#
  }#
}
library(ggplot2)#
library(aplot)#
#
p <- ggplot(mtcars, aes(mpg, disp)) + geom_point()#
p2 <- ggplot(mtcars, aes(mpg)) + #
    geom_density(fill='steelblue', alpha=.5) + #
        ggtree::theme_dendrogram()#
p3 <- ggplot(mtcars, aes(x=1, y=disp)) + #
    geom_boxplot(fill='firebrick', alpha=.5) + #
    theme_void()#
ap <- p %>% #
    insert_top(p2, height=.3) %>% #
    insert_right(p3, width=.1)
ap
p3
layout(1)#
par("mar"=c(5.1,4.1,2.1,2.1))#
par("oma"=c(0,0,0,0))#
aplot(sin, xlim=c(0,2*pi), ylim=c(-1.1,1.1), bgcol="lightgoldenrodyellow")#
abline(h=0, col="grey75")#
label("top", txt="Sine Function", lwd=0, bgcol="grey25", col="white")#
label("bottomleft", txt="astro:label (label)", cex=2, lwd=0, bgcol=NULL)
library(aplot)
layout(1)#
par("mar"=c(5.1,4.1,2.1,2.1))#
par("oma"=c(0,0,0,0))#
aplot(sin, xlim=c(0,2*pi), ylim=c(-1.1,1.1), bgcol="lightgoldenrodyellow")#
abline(h=0, col="grey75")#
label("top", txt="Sine Function", lwd=0, bgcol="grey25", col="white")#
label("bottomleft", txt="astro:label (label)", cex=2, lwd=0, bgcol=NULL)
instal.package(astronmy)
install.package(astronmy)
local_project_dir='/Users/s1687811/Documents/PhD/Research/CooperativePathogenicityVirulence/'#
setwd(local_project_dir)#
setwd('./CooperativePathogenicityVirulence_repo/')#
source('./scripts/sourced_packages.R')#
library(ape)#
library(MCMCglmm)#
library(dmetar)#
library(esc)#
# CFR DATASET ----#
d.cfr<- read.table('./output/1_processed_tables/4.1_assembled_CFR_SPECIES_annotation.txt', header=TRUE,#
                   sep = '\t',#
                   colClasses = c('character', 'character', 'character',#
                                  'numeric', 'numeric',#
                                  'character', 'character', 'character',#
                                  'numeric', 'numeric',#
                                  rep('character', 4), rep('numeric', 8)))#
#
d.cfr<- rename(d.cfr,#
               supfam_id = matching_supfam_id,#
               nb_cds = total_cds)#
# PHYLOGENY#
tree<- read.tree('./data/5_phylogeny_files/supfam_cfr_tree.newick')#
tree$tip.label#
tree<- drop.tip(tree, tree$tip.label[!tree$tip.label %in% d.cfr$supfam_id])#
tree$tip.label<- d.cfr$species_id[match(tree$tip.label, d.cfr$supfam_id)]#
tree<- chronopl(tree, lambda = 1)#
#plot(tree) # ultrametricised tree#
tree<-makeNodeLabel(tree)#
Ainv<-inverseA(tree, scale=FALSE)$Ainv#
# TRANSFORM RESPONSE#
# Legget's data are %death, but no actual number is given.#
# Can't analyse with binomial regression#
# So went for a log+1 gaussian response instead#
#
d.cfr$log_cfr_plus1<- log(d.cfr$case_fatality_rate + 1)#
# PRIOR AND RUN SPECS#
prior <- list(R = list(R1 = list(V = diag(1), nu = 0.002)), # non-pylo / residual#
              G = list(G1 = list(V = diag(1), nu = 1, alpha.mu = 0, alpha.V = 100))) # phylo#
#
div = 2#
nitt = 10500000/div#
burnin = 500000/div#
thin = ceiling(5000/div)#
nitt#
(nitt-burnin)/thin#
# REPLICATE LEGGET ----#
m3.legget <- MCMCglmm(#
  log_cfr_plus1  ~ -1 + infection_route + generation_time_h,#
  random = ~species_id,#
  ginverse = list(species_id= Ainv), #
  data = d.cfr,#
  prior = prior,#
  family = c("gaussian"),#
  start = list(QUASI = FALSE), #
  DIC = TRUE, nitt = nitt, thin = thin, burnin = burnin,#
  verbose = FALSE)#
# UNIVARIATE ----#
#
# code wrapper for univariate models with transmission route and growth rate included#
m3 <-function(df, focal_trait){#
  d.tmp<- df#
  colnames(d.tmp)[which(colnames(d.tmp) == focal_trait)]<- 'focal_trait'#
#
  m<- MCMCglmm(#
  log_cfr_plus1  ~ -1 + infection_route + generation_time_h + nb_cds + focal_trait,#
  random = ~species_id,#
  ginverse = list(species_id= Ainv), #
  data = d.tmp,#
  prior = prior,#
  family = c("gaussian"),#
  start = list(QUASI = FALSE), #
  DIC = TRUE, nitt = nitt, thin = thin, burnin = burnin,#
  verbose = FALSE)#
  return(m)#
}#
#
m3.bio<- m3(df = d.cfr, focal_trait = 'biofilm')#
m3.qs<- m3(df = d.cfr, focal_trait = 'quorum_sensing')#
m3.ab<- m3(df = d.cfr, focal_trait = 'antibiotic_degradation')#
m3.sid<- m3(df = d.cfr, focal_trait = 'siderophores')#
m3.ssy<- m3(df = d.cfr, focal_trait = 'secretion_system')#
m3.sec<- m3(df = d.cfr, focal_trait = 'secretome')#
m3.vf<- m3(df = d.cfr, focal_trait = 'is_victor_vf')#
# Checking whether growth rate might not be a confounding factor here, as the number of cooperative genes might affect growth rate#
#
m3.noGrowth <-function(df, focal_trait){#
  d.tmp<- df#
  colnames(d.tmp)[which(colnames(d.tmp) == focal_trait)]<- 'focal_trait'#
  m<- MCMCglmm(#
    log_cfr_plus1  ~ -1 + infection_route + nb_cds + focal_trait,#
    random = ~species_id,#
    ginverse = list(species_id= Ainv), #
    data = d.tmp,#
    prior = prior,#
    family = c("gaussian"),#
    start = list(QUASI = FALSE), #
    DIC = TRUE, nitt = nitt, thin = thin, burnin = burnin,#
    verbose = FALSE)#
  return(m)#
}#
#
m3.bio.noGrowth<- m3.noGrowth(df = d.cfr, focal_trait = 'biofilm')#
m3.qs.noGrowth<- m3.noGrowth(df = d.cfr, focal_trait = 'quorum_sensing')#
m3.ab.noGrowth<- m3.noGrowth(df = d.cfr, focal_trait = 'antibiotic_degradation')#
m3.sid.noGrowth<- m3.noGrowth(df = d.cfr, focal_trait = 'siderophores')#
m3.ssy.noGrowth<- m3.noGrowth(df = d.cfr, focal_trait = 'secretion_system')#
m3.sec.noGrowth<- m3.noGrowth(df = d.cfr, focal_trait = 'secretome')#
m3.vf.noGrowth<- m3.noGrowth(df = d.cfr, focal_trait = 'is_victor_vf')#
# MULTIVARIATE MODEL ----#
#
# z-transform predictors#
z.transform<- function(x){(x - mean(x))/sd(x)}#
#
d.cfr$z_nb_cds<- z.transform(d.cfr$nb_cds)#
d.cfr$z_biofilm<- z.transform(d.cfr$biofilm)#
d.cfr$z_quorum_sensing<- z.transform(d.cfr$quorum_sensing)#
d.cfr$z_antibiotic_degradation<- z.transform(d.cfr$antibiotic_degradation)#
d.cfr$z_secretion_system<- z.transform(d.cfr$secretion_system)#
d.cfr$z_siderophores<- z.transform(d.cfr$siderophores)#
d.cfr$z_secretome<- z.transform(d.cfr$secretome)#
d.cfr$z_is_victor_vf<- z.transform(d.cfr$is_victor_vf)#
m3.multi.with_vf<- MCMCglmm(#
  log_cfr_plus1  ~ -1 + infection_route + generation_time_h + z_nb_cds + z_biofilm + z_quorum_sensing + z_antibiotic_degradation + z_secretion_system + z_siderophores + z_secretome + z_is_victor_vf,#
  random = ~species_id,#
  ginverse = list(species_id= Ainv), #
  data = d.cfr,#
  prior = prior,#
  family = c("gaussian"),#
  start = list(QUASI = FALSE), #
  DIC = TRUE, nitt = nitt, thin = thin, burnin = burnin,#
  verbose = FALSE)#
# Checking whether growth rate might not be a confounding factor here, as the number of cooperative genes might affect growth rate#
m3.multi.with_vf.NOgrowthRate<- MCMCglmm(#
  log_cfr_plus1  ~ -1 + infection_route + z_nb_cds + z_biofilm + z_quorum_sensing + z_antibiotic_degradation + z_secretion_system + z_siderophores + z_secretome + z_is_victor_vf,#
  random = ~species_id,#
  ginverse = list(species_id= Ainv), #
  data = d.cfr,#
  prior = prior,#
  family = c("gaussian"),#
  start = list(QUASI = FALSE), #
  DIC = TRUE, nitt = nitt, thin = thin, burnin = burnin,#
  verbose = FALSE)
save.image("./output/3_model_output/CompAnalysis_cfr_CHAIN3.RData")
